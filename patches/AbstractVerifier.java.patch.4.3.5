diff --git a/AbstractVerifier2.java b/AbstractVerifier.java
index 83b1236..a785a10 100644
--- a/AbstractVerifier2.java
+++ b/AbstractVerifier.java
@@ -42,13 +42,8 @@ import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.NoSuchElementException;
+import java.util.StringTokenizer;
 
-/* Javax.Naming package removed by HttpClient for Android script. */
-/* Javax.Naming package removed by HttpClient for Android script. */
-/* Javax.Naming package removed by HttpClient for Android script. */
-/* Javax.Naming package removed by HttpClient for Android script. */
-/* Javax.Naming package removed by HttpClient for Android script. */
-/* Javax.Naming package removed by HttpClient for Android script. */
 import javax.net.ssl.SSLException;
 import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocket;
@@ -272,29 +267,44 @@ public abstract class AbstractVerifier implements X509HostnameVerifier {
         if (subjectPrincipal == null) {
             return null;
         }
-        final List<String> cns = new ArrayList<String>();
-        try {
-            final LdapName subjectDN = new LdapName(subjectPrincipal);
-            final List<Rdn> rdns = subjectDN.getRdns();
-            for (int i = rdns.size() - 1; i >= 0; i--) {
-                final Rdn rds = rdns.get(i);
-                final Attributes attributes = rds.toAttributes();
-                final Attribute cn = attributes.get("cn");
-                if (cn != null) {
-                    try {
-                        final Object value = cn.get();
-                        if (value != null) {
-                            cns.add(value.toString());
-                        }
-                    } catch (NoSuchElementException ignore) {
-                    } catch (NamingException ignore) {
-                    }
-                }
+        LinkedList<String> cnList = new LinkedList<String>();
+        /*
+          Sebastian Hauer's original StrictSSLProtocolSocketFactory used
+          getName() and had the following comment:
+
+                Parses a X.500 distinguished name for the value of the
+                "Common Name" field.  This is done a bit sloppy right
+                 now and should probably be done a bit more according to
+                <code>RFC 2253</code>.
+
+           I've noticed that toString() seems to do a better job than
+           getName() on these X500Principal objects, so I'm hoping that
+           addresses Sebastian's concern.
+
+           For example, getName() gives me this:
+           1.2.840.113549.1.9.1=#16166a756c6975736461766965734063756362632e636f6d
+
+           whereas toString() gives me this:
+           EMAILADDRESS=juliusdavies@cucbc.com
+
+           Looks like toString() even works with non-ascii domain names!
+           I tested it with "&#x82b1;&#x5b50;.co.jp" and it worked fine.
+        */
+        StringTokenizer st = new StringTokenizer(subjectPrincipal, ",");
+        while (st.hasMoreTokens()) {
+            String tok = st.nextToken();
+            int x = tok.indexOf("CN=");
+            if (x >= 0) {
+                cnList.add(tok.substring(x + 3));
             }
-        } catch (InvalidNameException e) {
-            throw new SSLException(subjectPrincipal + " is not a valid X500 distinguished name");
         }
-        return cns.isEmpty() ? null : cns.toArray(new String[ cns.size() ]);
+        if (!cnList.isEmpty()) {
+            String[] cns = new String[cnList.size()];
+            cnList.toArray(cns);
+            return cns;
+        } else {
+            return null;
+        }
     }
 
     /**
